# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

#from asposediagramcloud.apis.diagram_api import DiagramApi
#from asposediagramcloud.rest import ApiException
#import asposediagramcloud
import os
import sys
import unittest
import test_base

from asposediagramcloud.models import *

ABSPATH = os.path.abspath(os.path.realpath(os.path.dirname(__file__)) + "/..")
sys.path.append(ABSPATH)

localtestFile = "testData/FileUpload.vdx"
storageTestFOLDER = "SDKTests\\Python"


class TestDiagramApi(unittest.TestCase):
    """ DiagramApi unit test stubs """

    def setUp(self):
        self.api = test_base.GetDiagramApi()
        self.storageApi = test_base.GetStorageApi()

    def tearDown(self):
        pass

    def test_file_upload(self):
        result = self.storageApi.upload_file(storageTestFOLDER, localtestFile)
        self.assertTrue(len(result.uploaded)>0)

    def test_convert_document(self):
        """
        Test case for convert_document

        Converts document from the request's content to the specified format.
        """
        result=self.api.convert_document("Convert.pdf",localtestFile)
        self.assertIsNotNone(result)
        pass

    def test_create_new(self):
        """
        Test case for create_new

        Create Empty file into the specified format.
        """
        name = 'file_create_python.vdx'
        folder = storageTestFOLDER
        is_overwrite = "true"
        result = self.api.create_new(name, folder=folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.created, 'Error has occurred while create file')
        pass

    def test_download_file_with_format(self):
        """
        Test case for download_file_with_format

        Exports the document into the specified format.
        """
        result=self.api.download_file_with_format("FileUpload.vdx","pdf",folder = storageTestFOLDER)
        self.assertIsNotNone(result)
        pass

    def test_save_as(self):
        """
        Test case for save_as

        Converts document to destination format with detailed settings and saves result to storage.
        """
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.pdf"
        request.folder=folder
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_pdf(self):

        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.pdf"
        request.folder=folder
        save_options=PdfSaveOptions()
        save_options.is_export_comments=True
        save_options.jpeg_quality=100
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_png(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.png"
        request.folder=folder
        save_options=ImageSaveOptions()
        save_options.is_export_comments=True
        save_options.jpeg_quality=100
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_bmp(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.bmp"
        request.folder=folder
        save_options=ImageSaveOptions()
        save_options.is_export_comments=True
        save_options.jpeg_quality=100
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_vssx(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.vssx"
        request.folder=folder
        save_options=DiagramSaveOptions()
        save_options.default_font="Times New Roman"
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_vstm(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.vstm"
        request.folder=folder
        save_options=DiagramSaveOptions()
        save_options.default_font="Times New Roman"
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_svg(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.svg"
        request.folder=folder
        save_options=SVGSaveOptions()
        save_options.quality=100
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_swf(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.swf"
        request.folder=folder
        save_options=SWFSaveOptions()
        save_options.save_foreground_pages_only=True
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

    def test_save_as_html(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.html"
        request.folder=folder
        save_options=HTMLSaveOptions()
        save_options.title="Save as HTML Test"
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        self.assertTrue(len(result.additionals)>0)
        pass

    def test_save_as_xps(self):
    
        folder = storageTestFOLDER
        is_overwrite = "true"

        request=SaveOptionsRequest()
        request.file_name="FileSaveAs.xps"
        request.folder=folder
        save_options=XPSSaveOptions()
        save_options.save_foreground_pages_only=True
        request.save_options=save_options
        result=self.api.save_as("FileUpload.vdx",request,folder = folder, is_overwrite=is_overwrite)
        self.assertIsNotNone(result.saved_file, 'Error has occurred while save as file')
        pass

if __name__ == '__main__':
    unittest.main()
