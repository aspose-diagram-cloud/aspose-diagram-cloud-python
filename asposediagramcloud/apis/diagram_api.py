# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems
from ..configuration import Configuration
from ..api_client import ApiClient
from asposediagramcloud.apis.o_auth_api import OAuthApi


class DiagramApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, grant_type, appsid, appkey, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client
            self.access_token = self.get_access_token(
                grant_type, appsid, appkey)

        self.api_client.set_default_header(
            "Authorization", "Bearer " + self.access_token)

    def get_access_token(self, grant_type, appsid, appkey):
        authApiClient = ApiClient('https://api.aspose.cloud')
        client = OAuthApi(authApiClient)
        auth_data = client.o_auth_post(grant_type, appsid, appkey)
        return auth_data.access_token

    def convert_document(self, name, file, **kwargs):
        """
        Converts document from the request's content to the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.convert_document(name, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Download document name. (required)
        :param file file: File to upload (required)
        :param str source_filename: Source document name.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.convert_document_with_http_info(name, file, **kwargs)
        else:
            (data) = self.convert_document_with_http_info(name, file, **kwargs)
            return data

    def convert_document_with_http_info(self, name, file, **kwargs):
        """
        Converts document from the request's content to the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.convert_document_with_http_info(name, file, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Download document name. (required)
        :param file file: File to upload (required)
        :param str source_filename: Source document name.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'file', 'source_filename']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `convert_document`")
        # verify the required parameter 'file' is set
        if ('file' not in params) or (params['file'] is None):
            raise ValueError(
                "Missing the required parameter `file` when calling `convert_document`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'source_filename' in params:
            query_params.append(('sourceFilename', params['source_filename']))

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['File'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['multipart/form-data'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/convert', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def create_new(self, name, **kwargs):
        """
        Create Empty file into the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str folder: The document folder.
        :param bool is_overwrite: If true overwrite the same name file.The default value is false
        :return: CreateNewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_new_with_http_info(name, **kwargs)
        else:
            (data) = self.create_new_with_http_info(name, **kwargs)
            return data

    def create_new_with_http_info(self, name, **kwargs):
        """
        Create Empty file into the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str folder: The document folder.
        :param bool is_overwrite: If true overwrite the same name file.The default value is false
        :return: CreateNewResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'folder', 'is_overwrite']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `create_new`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'is_overwrite' in params:
            query_params.append(('IsOverwrite', params['is_overwrite']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CreateNewResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def download_file_with_format(self, name, format, **kwargs):
        """
        Exports the document into the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.download_file_with_format(name, format, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str format: The destination format. (required)
        :param str folder: Original document folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.download_file_with_format_with_http_info(name, format, **kwargs)
        else:
            (data) = self.download_file_with_format_with_http_info(
                name, format, **kwargs)
            return data

    def download_file_with_format_with_http_info(self, name, format, **kwargs):
        """
        Exports the document into the specified format.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.download_file_with_format_with_http_info(name, format, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str format: The destination format. (required)
        :param str folder: Original document folder.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'format', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_with_format" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `download_file_with_format`")
        # verify the required parameter 'format' is set
        if ('format' not in params) or (params['format'] is None):
            raise ValueError(
                "Missing the required parameter `format` when calling `download_file_with_format`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['multipart/form-data'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='file',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def save_as(self, name, save_options_request, **kwargs):
        """
        Converts document to destination format with detailed settings and saves result to storage.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_as(name, save_options_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Original document name. (required)
        :param SaveOptionsRequest save_options_request: Save options. (required)
        :param str folder: Original document folder.
        :param bool is_overwrite: If true overwrite the same name file.The default value is false
        :return: SaveAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_as_with_http_info(name, save_options_request, **kwargs)
        else:
            (data) = self.save_as_with_http_info(
                name, save_options_request, **kwargs)
            return data

    def save_as_with_http_info(self, name, save_options_request, **kwargs):
        """
        Converts document to destination format with detailed settings and saves result to storage.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_as_with_http_info(name, save_options_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Original document name. (required)
        :param SaveOptionsRequest save_options_request: Save options. (required)
        :param str folder: Original document folder.
        :param bool is_overwrite: If true overwrite the same name file.The default value is false
        :return: SaveAsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'save_options_request', 'folder', 'is_overwrite']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_as" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `save_as`")
        # verify the required parameter 'save_options_request' is set
        if ('save_options_request' not in params) or (params['save_options_request'] is None):
            raise ValueError(
                "Missing the required parameter `save_options_request` when calling `save_as`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'is_overwrite' in params:
            query_params.append(('IsOverwrite', params['is_overwrite']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'save_options_request' in params:
            body_params = params['save_options_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/saveAs', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaveAsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def put_draw_ellipse(self, name, page_name, ellipse_data, **kwargs):
        """
        draw ellipse on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_ellipse(name, page_name, ellipse_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param EllipseData ellipse_data: drawing ellipse data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_draw_ellipse_with_http_info(name, page_name, ellipse_data, **kwargs)
        else:
            (data) = self.put_draw_ellipse_with_http_info(
                name, page_name, ellipse_data, **kwargs)
            return data

    def put_draw_ellipse_with_http_info(self, name, page_name, ellipse_data, **kwargs):
        """
        draw ellipse on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_ellipse_with_http_info(name, page_name, ellipse_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param EllipseData ellipse_data: drawing ellipse data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'ellipse_data', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_draw_ellipse" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `put_draw_ellipse`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError(
                "Missing the required parameter `page_name` when calling `put_draw_ellipse`")
        # verify the required parameter 'ellipse_data' is set
        if ('ellipse_data' not in params) or (params['ellipse_data'] is None):
            raise ValueError(
                "Missing the required parameter `ellipse_data` when calling `put_draw_ellipse`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'page_name' in params:
            path_params['pageName'] = params['page_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'ellipse_data' in params:
            body_params = params['ellipse_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/{pageName}/drawEllipse', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def put_draw_line(self, name, page_name, line_data, **kwargs):
        """
        draw line on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_line(name, page_name, line_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param LineData line_data: drawing line data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_draw_line_with_http_info(name, page_name, line_data, **kwargs)
        else:
            (data) = self.put_draw_line_with_http_info(
                name, page_name, line_data, **kwargs)
            return data

    def put_draw_line_with_http_info(self, name, page_name, line_data, **kwargs):
        """
        draw line on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_line_with_http_info(name, page_name, line_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param LineData line_data: drawing line data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'line_data', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_draw_line" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `put_draw_line`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError(
                "Missing the required parameter `page_name` when calling `put_draw_line`")
        # verify the required parameter 'line_data' is set
        if ('line_data' not in params) or (params['line_data'] is None):
            raise ValueError(
                "Missing the required parameter `line_data` when calling `put_draw_line`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'page_name' in params:
            path_params['pageName'] = params['page_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'line_data' in params:
            body_params = params['line_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/{pageName}/drawLine', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def put_draw_polyline(self, name, page_name, polyline_data, **kwargs):
        """
        draw polyline on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_polyline(name, page_name, polyline_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param PolylineData polyline_data: drawing polyline data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_draw_polyline_with_http_info(name, page_name, polyline_data, **kwargs)
        else:
            (data) = self.put_draw_polyline_with_http_info(
                name, page_name, polyline_data, **kwargs)
            return data

    def put_draw_polyline_with_http_info(self, name, page_name, polyline_data, **kwargs):
        """
        draw polyline on the page.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_draw_polyline_with_http_info(name, page_name, polyline_data, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: Page name. (required)
        :param PolylineData polyline_data: drawing polyline data. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'polyline_data', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_draw_polyline" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError(
                "Missing the required parameter `name` when calling `put_draw_polyline`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError(
                "Missing the required parameter `page_name` when calling `put_draw_polyline`")
        # verify the required parameter 'polyline_data' is set
        if ('polyline_data' not in params) or (params['polyline_data'] is None):
            raise ValueError(
                "Missing the required parameter `polyline_data` when calling `put_draw_polyline`")

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'page_name' in params:
            path_params['pageName'] = params['page_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'polyline_data' in params:
            body_params = params['polyline_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/{pageName}/drawPolyline', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get(
                                            '_return_http_data_only'),
                                        _preload_content=params.get(
                                            '_preload_content', True),
                                        _request_timeout=params.get(
                                            '_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_page(self, name, page_name, **kwargs):
        """
        Remove Page
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_page(name, page_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: The page name for delete. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_page_with_http_info(name, page_name, **kwargs)
        else:
            (data) = self.delete_page_with_http_info(name, page_name, **kwargs)
            return data

    def delete_page_with_http_info(self, name, page_name, **kwargs):
        """
        Remove Page
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_page_with_http_info(name, page_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: The page name for delete. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_page`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError("Missing the required parameter `page_name` when calling `delete_page`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'page_name' in params:
            path_params['pageName'] = params['page_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/{pageName}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pages(self, name, **kwargs):
        """
        Read pages info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pages(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str folder: Document folder.
        :return: ApiResponseOfListOfPageData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pages_with_http_info(name, **kwargs)
        else:
            (data) = self.get_pages_with_http_info(name, **kwargs)
            return data

    def get_pages_with_http_info(self, name, **kwargs):
        """
        Read pages info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pages_with_http_info(name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str folder: Document folder.
        :return: ApiResponseOfListOfPageData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_pages`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ApiResponseOfListOfPageData',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def post_page_setup(self, name, page_name, page_setting, **kwargs):
        """
        page setup
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_page_setup(name, page_name, page_setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: The page name for setting. (required)
        :param PageSetting page_setting: Page setting info. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.post_page_setup_with_http_info(name, page_name, page_setting, **kwargs)
        else:
            (data) = self.post_page_setup_with_http_info(name, page_name, page_setting, **kwargs)
            return data

    def post_page_setup_with_http_info(self, name, page_name, page_setting, **kwargs):
        """
        page setup
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.post_page_setup_with_http_info(name, page_name, page_setting, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: The page name for setting. (required)
        :param PageSetting page_setting: Page setting info. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'page_setting', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_page_setup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_page_setup`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError("Missing the required parameter `page_name` when calling `post_page_setup`")
        # verify the required parameter 'page_setting' is set
        if ('page_setting' not in params) or (params['page_setting'] is None):
            raise ValueError("Missing the required parameter `page_setting` when calling `post_page_setup`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'page_name' in params:
            query_params.append(('pageName', params['page_name']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'page_setting' in params:
            body_params = params['page_setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/PageSetup', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def put_new_page(self, name, page_name, **kwargs):
        """
        Add new empty page
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_new_page(name, page_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: New page name. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.put_new_page_with_http_info(name, page_name, **kwargs)
        else:
            (data) = self.put_new_page_with_http_info(name, page_name, **kwargs)
            return data

    def put_new_page_with_http_info(self, name, page_name, **kwargs):
        """
        Add new empty page
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.put_new_page_with_http_info(name, page_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str page_name: New page name. (required)
        :param str folder: Document folder.
        :return: ModifyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'page_name', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_new_page" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `put_new_page`")
        # verify the required parameter 'page_name' is set
        if ('page_name' not in params) or (params['page_name'] is None):
            raise ValueError("Missing the required parameter `page_name` when calling `put_new_page`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']

        query_params = []
        if 'page_name' in params:
            query_params.append(('pageName', params['page_name']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['JWT']

        return self.api_client.call_api('/diagram/{name}/pages/addNew', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ModifyResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
