# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointF(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_empty': 'bool',
        'x': 'float',
        'y': 'float'
    }

    attribute_map = {
        'is_empty': 'IsEmpty',
        'x': 'X',
        'y': 'Y'
    }
    
    @staticmethod
    def get_swagger_types():
        return PointF.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return PointF.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, is_empty=None, x=None, y=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        PointF - a model defined in Swagger
        """

        self.container['is_empty'] = None
        self.container['x'] = None
        self.container['y'] = None

        self.is_empty = is_empty
        self.x = x
        self.y = y

    @property
    def is_empty(self):
        """
        Gets the is_empty of this PointF.

        :return: The is_empty of this PointF.
        :rtype: bool
        """
        return self.container['is_empty']

    @is_empty.setter
    def is_empty(self, is_empty):
        """
        Sets the is_empty of this PointF.

        :param is_empty: The is_empty of this PointF.
        :type: bool
        """
        """
        if is_empty is None:
            raise ValueError("Invalid value for `is_empty`, must not be `None`")
        """

        self.container['is_empty'] = is_empty

    @property
    def x(self):
        """
        Gets the x of this PointF.

        :return: The x of this PointF.
        :rtype: float
        """
        return self.container['x']

    @x.setter
    def x(self, x):
        """
        Sets the x of this PointF.

        :param x: The x of this PointF.
        :type: float
        """
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")
        """

        self.container['x'] = x

    @property
    def y(self):
        """
        Gets the y of this PointF.

        :return: The y of this PointF.
        :rtype: float
        """
        return self.container['y']

    @y.setter
    def y(self, y):
        """
        Sets the y of this PointF.

        :param y: The y of this PointF.
        :type: float
        """
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")
        """

        self.container['y'] = y

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointF):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
