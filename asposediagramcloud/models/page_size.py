# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PageSize(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'paper_size_format': 'str'
    }

    attribute_map = {
        'paper_size_format': 'PaperSizeFormat'
    }
    
    @staticmethod
    def get_swagger_types():
        return PageSize.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return PageSize.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, paper_size_format=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        PageSize - a model defined in Swagger
        """

        self.container['paper_size_format'] = None

        if paper_size_format is not None:
          self.paper_size_format = paper_size_format

    @property
    def paper_size_format(self):
        """
        Gets the paper_size_format of this PageSize.

        :return: The paper_size_format of this PageSize.
        :rtype: str
        """
        return self.container['paper_size_format']

    @paper_size_format.setter
    def paper_size_format(self, paper_size_format):
        """
        Sets the paper_size_format of this PageSize.

        :param paper_size_format: The paper_size_format of this PageSize.
        :type: str
        """
        allowed_values = ["Custom", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "Letter", "Legal", "Legal13", "Tabloid", "Executive", "DL", "COM9", "COM10", "Monarch"]
        if paper_size_format not in allowed_values:
            raise ValueError(
                "Invalid value for `paper_size_format` ({0}), must be one of {1}"
                .format(paper_size_format, allowed_values)
            )

        self.container['paper_size_format'] = paper_size_format

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PageSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
