# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DrawShapeData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pin_x': 'float',
        'pin_y': 'float',
        'width': 'float',
        'height': 'float',
        'shape_style_data': 'ShapeStyleData',
        'text': 'str',
        'text_style_data': 'TextStyleData'
    }

    attribute_map = {
        'pin_x': 'PinX',
        'pin_y': 'PinY',
        'width': 'Width',
        'height': 'Height',
        'shape_style_data': 'ShapeStyleData',
        'text': 'Text',
        'text_style_data': 'TextStyleData'
    }
    
    @staticmethod
    def get_swagger_types():
        return DrawShapeData.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return DrawShapeData.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, pin_x=None, pin_y=None, width=None, height=None, shape_style_data=None, text=None, text_style_data=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        DrawShapeData - a model defined in Swagger
        """

        self.container['pin_x'] = None
        self.container['pin_y'] = None
        self.container['width'] = None
        self.container['height'] = None
        self.container['shape_style_data'] = None
        self.container['text'] = None
        self.container['text_style_data'] = None

        self.pin_x = pin_x
        self.pin_y = pin_y
        self.width = width
        self.height = height
        if shape_style_data is not None:
          self.shape_style_data = shape_style_data
        if text is not None:
          self.text = text
        if text_style_data is not None:
          self.text_style_data = text_style_data

    @property
    def pin_x(self):
        """
        Gets the pin_x of this DrawShapeData.

        :return: The pin_x of this DrawShapeData.
        :rtype: float
        """
        return self.container['pin_x']

    @pin_x.setter
    def pin_x(self, pin_x):
        """
        Sets the pin_x of this DrawShapeData.

        :param pin_x: The pin_x of this DrawShapeData.
        :type: float
        """
        """
        if pin_x is None:
            raise ValueError("Invalid value for `pin_x`, must not be `None`")
        """

        self.container['pin_x'] = pin_x

    @property
    def pin_y(self):
        """
        Gets the pin_y of this DrawShapeData.

        :return: The pin_y of this DrawShapeData.
        :rtype: float
        """
        return self.container['pin_y']

    @pin_y.setter
    def pin_y(self, pin_y):
        """
        Sets the pin_y of this DrawShapeData.

        :param pin_y: The pin_y of this DrawShapeData.
        :type: float
        """
        """
        if pin_y is None:
            raise ValueError("Invalid value for `pin_y`, must not be `None`")
        """

        self.container['pin_y'] = pin_y

    @property
    def width(self):
        """
        Gets the width of this DrawShapeData.

        :return: The width of this DrawShapeData.
        :rtype: float
        """
        return self.container['width']

    @width.setter
    def width(self, width):
        """
        Sets the width of this DrawShapeData.

        :param width: The width of this DrawShapeData.
        :type: float
        """
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")
        """

        self.container['width'] = width

    @property
    def height(self):
        """
        Gets the height of this DrawShapeData.

        :return: The height of this DrawShapeData.
        :rtype: float
        """
        return self.container['height']

    @height.setter
    def height(self, height):
        """
        Sets the height of this DrawShapeData.

        :param height: The height of this DrawShapeData.
        :type: float
        """
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")
        """

        self.container['height'] = height

    @property
    def shape_style_data(self):
        """
        Gets the shape_style_data of this DrawShapeData.

        :return: The shape_style_data of this DrawShapeData.
        :rtype: ShapeStyleData
        """
        return self.container['shape_style_data']

    @shape_style_data.setter
    def shape_style_data(self, shape_style_data):
        """
        Sets the shape_style_data of this DrawShapeData.

        :param shape_style_data: The shape_style_data of this DrawShapeData.
        :type: ShapeStyleData
        """

        self.container['shape_style_data'] = shape_style_data

    @property
    def text(self):
        """
        Gets the text of this DrawShapeData.

        :return: The text of this DrawShapeData.
        :rtype: str
        """
        return self.container['text']

    @text.setter
    def text(self, text):
        """
        Sets the text of this DrawShapeData.

        :param text: The text of this DrawShapeData.
        :type: str
        """

        self.container['text'] = text

    @property
    def text_style_data(self):
        """
        Gets the text_style_data of this DrawShapeData.

        :return: The text_style_data of this DrawShapeData.
        :rtype: TextStyleData
        """
        return self.container['text_style_data']

    @text_style_data.setter
    def text_style_data(self, text_style_data):
        """
        Sets the text_style_data of this DrawShapeData.

        :param text_style_data: The text_style_data of this DrawShapeData.
        :type: TextStyleData
        """

        self.container['text_style_data'] = text_style_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DrawShapeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
