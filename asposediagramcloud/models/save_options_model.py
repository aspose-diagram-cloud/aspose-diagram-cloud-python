# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SaveOptionsModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'save_format': 'str',
        'default_font': 'str'
    }

    attribute_map = {
        'save_format': 'SaveFormat',
        'default_font': 'DefaultFont'
    }
    
    @staticmethod
    def get_swagger_types():
        return SaveOptionsModel.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return SaveOptionsModel.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, save_format=None, default_font=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        SaveOptionsModel - a model defined in Swagger
        """

        self.container['save_format'] = None
        self.container['default_font'] = None

        self.save_format = save_format
        if default_font is not None:
          self.default_font = default_font

    @property
    def save_format(self):
        """
        Gets the save_format of this SaveOptionsModel.

        :return: The save_format of this SaveOptionsModel.
        :rtype: str
        """
        return self.container['save_format']

    @save_format.setter
    def save_format(self, save_format):
        """
        Sets the save_format of this SaveOptionsModel.

        :param save_format: The save_format of this SaveOptionsModel.
        :type: str
        """
        """
        if save_format is None:
            raise ValueError("Invalid value for `save_format`, must not be `None`")
        """
        allowed_values = ["VDX", "VSX", "VTX", "TIFF", "PNG", "BMP", "EMF", "JPEG", "PDF", "XPS", "GIF", "HTML", "SVG", "SWF", "XAML", "VSDX", "VSTX", "VSSX", "VSDM", "VSSM", "VSTM"]
        #if save_format not in allowed_values:
        #    raise ValueError(
        #        "Invalid value for `save_format` ({0}), must be one of {1}"
        #        .format(save_format, allowed_values)
        #    )

        self.container['save_format'] = save_format

    @property
    def default_font(self):
        """
        Gets the default_font of this SaveOptionsModel.

        :return: The default_font of this SaveOptionsModel.
        :rtype: str
        """
        return self.container['default_font']

    @default_font.setter
    def default_font(self, default_font):
        """
        Sets the default_font of this SaveOptionsModel.

        :param default_font: The default_font of this SaveOptionsModel.
        :type: str
        """

        self.container['default_font'] = default_font

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SaveOptionsModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
