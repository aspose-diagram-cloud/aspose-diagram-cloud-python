# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PdfDigitalSignatureDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signature_date': 'datetime',
        'reason': 'str',
        'location': 'str',
        'hash_algorithm': 'str'
    }

    attribute_map = {
        'signature_date': 'SignatureDate',
        'reason': 'Reason',
        'location': 'Location',
        'hash_algorithm': 'HashAlgorithm'
    }
    
    @staticmethod
    def get_swagger_types():
        return PdfDigitalSignatureDetails.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return PdfDigitalSignatureDetails.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, signature_date=None, reason=None, location=None, hash_algorithm=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        PdfDigitalSignatureDetails - a model defined in Swagger
        """

        self.container['signature_date'] = None
        self.container['reason'] = None
        self.container['location'] = None
        self.container['hash_algorithm'] = None

        if signature_date is not None:
          self.signature_date = signature_date
        if reason is not None:
          self.reason = reason
        if location is not None:
          self.location = location
        if hash_algorithm is not None:
          self.hash_algorithm = hash_algorithm

    @property
    def signature_date(self):
        """
        Gets the signature_date of this PdfDigitalSignatureDetails.

        :return: The signature_date of this PdfDigitalSignatureDetails.
        :rtype: datetime
        """
        return self.container['signature_date']

    @signature_date.setter
    def signature_date(self, signature_date):
        """
        Sets the signature_date of this PdfDigitalSignatureDetails.

        :param signature_date: The signature_date of this PdfDigitalSignatureDetails.
        :type: datetime
        """

        self.container['signature_date'] = signature_date

    @property
    def reason(self):
        """
        Gets the reason of this PdfDigitalSignatureDetails.

        :return: The reason of this PdfDigitalSignatureDetails.
        :rtype: str
        """
        return self.container['reason']

    @reason.setter
    def reason(self, reason):
        """
        Sets the reason of this PdfDigitalSignatureDetails.

        :param reason: The reason of this PdfDigitalSignatureDetails.
        :type: str
        """

        self.container['reason'] = reason

    @property
    def location(self):
        """
        Gets the location of this PdfDigitalSignatureDetails.

        :return: The location of this PdfDigitalSignatureDetails.
        :rtype: str
        """
        return self.container['location']

    @location.setter
    def location(self, location):
        """
        Sets the location of this PdfDigitalSignatureDetails.

        :param location: The location of this PdfDigitalSignatureDetails.
        :type: str
        """

        self.container['location'] = location

    @property
    def hash_algorithm(self):
        """
        Gets the hash_algorithm of this PdfDigitalSignatureDetails.

        :return: The hash_algorithm of this PdfDigitalSignatureDetails.
        :rtype: str
        """
        return self.container['hash_algorithm']

    @hash_algorithm.setter
    def hash_algorithm(self, hash_algorithm):
        """
        Sets the hash_algorithm of this PdfDigitalSignatureDetails.

        :param hash_algorithm: The hash_algorithm of this PdfDigitalSignatureDetails.
        :type: str
        """
        allowed_values = ["Sha1", "Sha256", "Sha384", "Sha512", "Md5"]
        if hash_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `hash_algorithm` ({0}), must be one of {1}"
                .format(hash_algorithm, allowed_values)
            )

        self.container['hash_algorithm'] = hash_algorithm

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PdfDigitalSignatureDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
