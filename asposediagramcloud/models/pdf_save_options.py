# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import RenderingSaveOptions

class PdfSaveOptions(RenderingSaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'horizontal_resolution': 'int',
        'vertical_resolution': 'int',
        'page_count': 'int',
        'jpeg_quality': 'int',
        'export_hidden_page': 'bool',
        'page_index': 'int',
        'save_foreground_pages_only': 'bool',
        'compliance': 'str',
        'encryption_details': 'PdfEncryptionDetails',
        'text_compression': 'str',
        'split_multi_pages': 'bool',
        'digital_signature_details': 'PdfDigitalSignatureDetails'
    }

    attribute_map = {
        'horizontal_resolution': 'HorizontalResolution',
        'vertical_resolution': 'VerticalResolution',
        'page_count': 'PageCount',
        'jpeg_quality': 'JpegQuality',
        'export_hidden_page': 'ExportHiddenPage',
        'page_index': 'PageIndex',
        'save_foreground_pages_only': 'SaveForegroundPagesOnly',
        'compliance': 'Compliance',
        'encryption_details': 'EncryptionDetails',
        'text_compression': 'TextCompression',
        'split_multi_pages': 'SplitMultiPages',
        'digital_signature_details': 'DigitalSignatureDetails'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(PdfSaveOptions.swagger_types, **RenderingSaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(PdfSaveOptions.attribute_map, **RenderingSaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, horizontal_resolution=None, vertical_resolution=None, page_count=None, jpeg_quality=None, export_hidden_page=None, page_index=None, save_foreground_pages_only=None, compliance=None, encryption_details=None, text_compression=None, split_multi_pages=None, digital_signature_details=None, **kw):
        super(PdfSaveOptions, self).__init__(**kw)
		    
        """
        PdfSaveOptions - a model defined in Swagger
        """

        self.container['horizontal_resolution'] = None
        self.container['vertical_resolution'] = None
        self.container['page_count'] = None
        self.container['jpeg_quality'] = None
        self.container['export_hidden_page'] = None
        self.container['page_index'] = None
        self.container['save_foreground_pages_only'] = None
        self.container['compliance'] = None
        self.container['encryption_details'] = None
        self.container['text_compression'] = None
        self.container['split_multi_pages'] = None
        self.container['digital_signature_details'] = None

        if horizontal_resolution is not None:
          self.horizontal_resolution = horizontal_resolution
        if vertical_resolution is not None:
          self.vertical_resolution = vertical_resolution
        if page_count is not None:
          self.page_count = page_count
        if jpeg_quality is not None:
          self.jpeg_quality = jpeg_quality
        if export_hidden_page is not None:
          self.export_hidden_page = export_hidden_page
        if page_index is not None:
          self.page_index = page_index
        if save_foreground_pages_only is not None:
          self.save_foreground_pages_only = save_foreground_pages_only
        if compliance is not None:
          self.compliance = compliance
        if encryption_details is not None:
          self.encryption_details = encryption_details
        if text_compression is not None:
          self.text_compression = text_compression
        if split_multi_pages is not None:
          self.split_multi_pages = split_multi_pages
        if digital_signature_details is not None:
          self.digital_signature_details = digital_signature_details

    @property
    def horizontal_resolution(self):
        """
        Gets the horizontal_resolution of this PdfSaveOptions.

        :return: The horizontal_resolution of this PdfSaveOptions.
        :rtype: int
        """
        return self.container['horizontal_resolution']

    @horizontal_resolution.setter
    def horizontal_resolution(self, horizontal_resolution):
        """
        Sets the horizontal_resolution of this PdfSaveOptions.

        :param horizontal_resolution: The horizontal_resolution of this PdfSaveOptions.
        :type: int
        """

        self.container['horizontal_resolution'] = horizontal_resolution

    @property
    def vertical_resolution(self):
        """
        Gets the vertical_resolution of this PdfSaveOptions.

        :return: The vertical_resolution of this PdfSaveOptions.
        :rtype: int
        """
        return self.container['vertical_resolution']

    @vertical_resolution.setter
    def vertical_resolution(self, vertical_resolution):
        """
        Sets the vertical_resolution of this PdfSaveOptions.

        :param vertical_resolution: The vertical_resolution of this PdfSaveOptions.
        :type: int
        """

        self.container['vertical_resolution'] = vertical_resolution

    @property
    def page_count(self):
        """
        Gets the page_count of this PdfSaveOptions.

        :return: The page_count of this PdfSaveOptions.
        :rtype: int
        """
        return self.container['page_count']

    @page_count.setter
    def page_count(self, page_count):
        """
        Sets the page_count of this PdfSaveOptions.

        :param page_count: The page_count of this PdfSaveOptions.
        :type: int
        """

        self.container['page_count'] = page_count

    @property
    def jpeg_quality(self):
        """
        Gets the jpeg_quality of this PdfSaveOptions.

        :return: The jpeg_quality of this PdfSaveOptions.
        :rtype: int
        """
        return self.container['jpeg_quality']

    @jpeg_quality.setter
    def jpeg_quality(self, jpeg_quality):
        """
        Sets the jpeg_quality of this PdfSaveOptions.

        :param jpeg_quality: The jpeg_quality of this PdfSaveOptions.
        :type: int
        """

        self.container['jpeg_quality'] = jpeg_quality

    @property
    def export_hidden_page(self):
        """
        Gets the export_hidden_page of this PdfSaveOptions.

        :return: The export_hidden_page of this PdfSaveOptions.
        :rtype: bool
        """
        return self.container['export_hidden_page']

    @export_hidden_page.setter
    def export_hidden_page(self, export_hidden_page):
        """
        Sets the export_hidden_page of this PdfSaveOptions.

        :param export_hidden_page: The export_hidden_page of this PdfSaveOptions.
        :type: bool
        """

        self.container['export_hidden_page'] = export_hidden_page

    @property
    def page_index(self):
        """
        Gets the page_index of this PdfSaveOptions.

        :return: The page_index of this PdfSaveOptions.
        :rtype: int
        """
        return self.container['page_index']

    @page_index.setter
    def page_index(self, page_index):
        """
        Sets the page_index of this PdfSaveOptions.

        :param page_index: The page_index of this PdfSaveOptions.
        :type: int
        """

        self.container['page_index'] = page_index

    @property
    def save_foreground_pages_only(self):
        """
        Gets the save_foreground_pages_only of this PdfSaveOptions.

        :return: The save_foreground_pages_only of this PdfSaveOptions.
        :rtype: bool
        """
        return self.container['save_foreground_pages_only']

    @save_foreground_pages_only.setter
    def save_foreground_pages_only(self, save_foreground_pages_only):
        """
        Sets the save_foreground_pages_only of this PdfSaveOptions.

        :param save_foreground_pages_only: The save_foreground_pages_only of this PdfSaveOptions.
        :type: bool
        """

        self.container['save_foreground_pages_only'] = save_foreground_pages_only

    @property
    def compliance(self):
        """
        Gets the compliance of this PdfSaveOptions.

        :return: The compliance of this PdfSaveOptions.
        :rtype: str
        """
        return self.container['compliance']

    @compliance.setter
    def compliance(self, compliance):
        """
        Sets the compliance of this PdfSaveOptions.

        :param compliance: The compliance of this PdfSaveOptions.
        :type: str
        """
        allowed_values = ["Pdf15", "PdfA1a", "PdfA1b"]
        if compliance not in allowed_values:
            raise ValueError(
                "Invalid value for `compliance` ({0}), must be one of {1}"
                .format(compliance, allowed_values)
            )

        self.container['compliance'] = compliance

    @property
    def encryption_details(self):
        """
        Gets the encryption_details of this PdfSaveOptions.

        :return: The encryption_details of this PdfSaveOptions.
        :rtype: PdfEncryptionDetails
        """
        return self.container['encryption_details']

    @encryption_details.setter
    def encryption_details(self, encryption_details):
        """
        Sets the encryption_details of this PdfSaveOptions.

        :param encryption_details: The encryption_details of this PdfSaveOptions.
        :type: PdfEncryptionDetails
        """

        self.container['encryption_details'] = encryption_details

    @property
    def text_compression(self):
        """
        Gets the text_compression of this PdfSaveOptions.

        :return: The text_compression of this PdfSaveOptions.
        :rtype: str
        """
        return self.container['text_compression']

    @text_compression.setter
    def text_compression(self, text_compression):
        """
        Sets the text_compression of this PdfSaveOptions.

        :param text_compression: The text_compression of this PdfSaveOptions.
        :type: str
        """
        allowed_values = ["None", "Flate"]
        if text_compression not in allowed_values:
            raise ValueError(
                "Invalid value for `text_compression` ({0}), must be one of {1}"
                .format(text_compression, allowed_values)
            )

        self.container['text_compression'] = text_compression

    @property
    def split_multi_pages(self):
        """
        Gets the split_multi_pages of this PdfSaveOptions.

        :return: The split_multi_pages of this PdfSaveOptions.
        :rtype: bool
        """
        return self.container['split_multi_pages']

    @split_multi_pages.setter
    def split_multi_pages(self, split_multi_pages):
        """
        Sets the split_multi_pages of this PdfSaveOptions.

        :param split_multi_pages: The split_multi_pages of this PdfSaveOptions.
        :type: bool
        """

        self.container['split_multi_pages'] = split_multi_pages

    @property
    def digital_signature_details(self):
        """
        Gets the digital_signature_details of this PdfSaveOptions.

        :return: The digital_signature_details of this PdfSaveOptions.
        :rtype: PdfDigitalSignatureDetails
        """
        return self.container['digital_signature_details']

    @digital_signature_details.setter
    def digital_signature_details(self, digital_signature_details):
        """
        Sets the digital_signature_details of this PdfSaveOptions.

        :param digital_signature_details: The digital_signature_details of this PdfSaveOptions.
        :type: PdfDigitalSignatureDetails
        """

        self.container['digital_signature_details'] = digital_signature_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PdfSaveOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
