# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import RenderingSaveOptions

class SVGSaveOptions(RenderingSaveOptions):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_hidden_page': 'bool',
        'quality': 'int',
        'page_index': 'int',
        'svg_fit_to_view_port': 'bool',
        'export_element_as_rect_tag': 'bool'
    }

    attribute_map = {
        'export_hidden_page': 'ExportHiddenPage',
        'quality': 'Quality',
        'page_index': 'PageIndex',
        'svg_fit_to_view_port': 'SVGFitToViewPort',
        'export_element_as_rect_tag': 'ExportElementAsRectTag'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(SVGSaveOptions.swagger_types, **RenderingSaveOptions.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(SVGSaveOptions.attribute_map, **RenderingSaveOptions.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, export_hidden_page=None, quality=None, page_index=None, svg_fit_to_view_port=None, export_element_as_rect_tag=None, **kw):
        super(SVGSaveOptions, self).__init__(**kw)
		    
        """
        SVGSaveOptions - a model defined in Swagger
        """

        self.container['export_hidden_page'] = None
        self.container['quality'] = None
        self.container['page_index'] = None
        self.container['svg_fit_to_view_port'] = None
        self.container['export_element_as_rect_tag'] = None

        if export_hidden_page is not None:
          self.export_hidden_page = export_hidden_page
        if quality is not None:
          self.quality = quality
        if page_index is not None:
          self.page_index = page_index
        if svg_fit_to_view_port is not None:
          self.svg_fit_to_view_port = svg_fit_to_view_port
        if export_element_as_rect_tag is not None:
          self.export_element_as_rect_tag = export_element_as_rect_tag

    @property
    def export_hidden_page(self):
        """
        Gets the export_hidden_page of this SVGSaveOptions.

        :return: The export_hidden_page of this SVGSaveOptions.
        :rtype: bool
        """
        return self.container['export_hidden_page']

    @export_hidden_page.setter
    def export_hidden_page(self, export_hidden_page):
        """
        Sets the export_hidden_page of this SVGSaveOptions.

        :param export_hidden_page: The export_hidden_page of this SVGSaveOptions.
        :type: bool
        """

        self.container['export_hidden_page'] = export_hidden_page

    @property
    def quality(self):
        """
        Gets the quality of this SVGSaveOptions.

        :return: The quality of this SVGSaveOptions.
        :rtype: int
        """
        return self.container['quality']

    @quality.setter
    def quality(self, quality):
        """
        Sets the quality of this SVGSaveOptions.

        :param quality: The quality of this SVGSaveOptions.
        :type: int
        """

        self.container['quality'] = quality

    @property
    def page_index(self):
        """
        Gets the page_index of this SVGSaveOptions.

        :return: The page_index of this SVGSaveOptions.
        :rtype: int
        """
        return self.container['page_index']

    @page_index.setter
    def page_index(self, page_index):
        """
        Sets the page_index of this SVGSaveOptions.

        :param page_index: The page_index of this SVGSaveOptions.
        :type: int
        """

        self.container['page_index'] = page_index

    @property
    def svg_fit_to_view_port(self):
        """
        Gets the svg_fit_to_view_port of this SVGSaveOptions.

        :return: The svg_fit_to_view_port of this SVGSaveOptions.
        :rtype: bool
        """
        return self.container['svg_fit_to_view_port']

    @svg_fit_to_view_port.setter
    def svg_fit_to_view_port(self, svg_fit_to_view_port):
        """
        Sets the svg_fit_to_view_port of this SVGSaveOptions.

        :param svg_fit_to_view_port: The svg_fit_to_view_port of this SVGSaveOptions.
        :type: bool
        """

        self.container['svg_fit_to_view_port'] = svg_fit_to_view_port

    @property
    def export_element_as_rect_tag(self):
        """
        Gets the export_element_as_rect_tag of this SVGSaveOptions.

        :return: The export_element_as_rect_tag of this SVGSaveOptions.
        :rtype: bool
        """
        return self.container['export_element_as_rect_tag']

    @export_element_as_rect_tag.setter
    def export_element_as_rect_tag(self, export_element_as_rect_tag):
        """
        Sets the export_element_as_rect_tag of this SVGSaveOptions.

        :param export_element_as_rect_tag: The export_element_as_rect_tag of this SVGSaveOptions.
        :type: bool
        """

        self.container['export_element_as_rect_tag'] = export_element_as_rect_tag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SVGSaveOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
