# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RectangleF(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'location': 'PointF',
        'size': 'str',
        'x': 'float',
        'y': 'float',
        'width': 'float',
        'height': 'float',
        'left': 'float',
        'top': 'float',
        'right': 'float',
        'bottom': 'float',
        'is_empty': 'bool'
    }

    attribute_map = {
        'location': 'Location',
        'size': 'Size',
        'x': 'X',
        'y': 'Y',
        'width': 'Width',
        'height': 'Height',
        'left': 'Left',
        'top': 'Top',
        'right': 'Right',
        'bottom': 'Bottom',
        'is_empty': 'IsEmpty'
    }
    
    @staticmethod
    def get_swagger_types():
        return RectangleF.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return RectangleF.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, location=None, size=None, x=None, y=None, width=None, height=None, left=None, top=None, right=None, bottom=None, is_empty=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        RectangleF - a model defined in Swagger
        """

        self.container['location'] = None
        self.container['size'] = None
        self.container['x'] = None
        self.container['y'] = None
        self.container['width'] = None
        self.container['height'] = None
        self.container['left'] = None
        self.container['top'] = None
        self.container['right'] = None
        self.container['bottom'] = None
        self.container['is_empty'] = None

        self.location = location
        self.size = size
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.left = left
        self.top = top
        self.right = right
        self.bottom = bottom
        self.is_empty = is_empty

    @property
    def location(self):
        """
        Gets the location of this RectangleF.

        :return: The location of this RectangleF.
        :rtype: PointF
        """
        return self.container['location']

    @location.setter
    def location(self, location):
        """
        Sets the location of this RectangleF.

        :param location: The location of this RectangleF.
        :type: PointF
        """
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")
        """

        self.container['location'] = location

    @property
    def size(self):
        """
        Gets the size of this RectangleF.

        :return: The size of this RectangleF.
        :rtype: str
        """
        return self.container['size']

    @size.setter
    def size(self, size):
        """
        Sets the size of this RectangleF.

        :param size: The size of this RectangleF.
        :type: str
        """
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")
        """

        self.container['size'] = size

    @property
    def x(self):
        """
        Gets the x of this RectangleF.

        :return: The x of this RectangleF.
        :rtype: float
        """
        return self.container['x']

    @x.setter
    def x(self, x):
        """
        Sets the x of this RectangleF.

        :param x: The x of this RectangleF.
        :type: float
        """
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")
        """

        self.container['x'] = x

    @property
    def y(self):
        """
        Gets the y of this RectangleF.

        :return: The y of this RectangleF.
        :rtype: float
        """
        return self.container['y']

    @y.setter
    def y(self, y):
        """
        Sets the y of this RectangleF.

        :param y: The y of this RectangleF.
        :type: float
        """
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")
        """

        self.container['y'] = y

    @property
    def width(self):
        """
        Gets the width of this RectangleF.

        :return: The width of this RectangleF.
        :rtype: float
        """
        return self.container['width']

    @width.setter
    def width(self, width):
        """
        Sets the width of this RectangleF.

        :param width: The width of this RectangleF.
        :type: float
        """
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")
        """

        self.container['width'] = width

    @property
    def height(self):
        """
        Gets the height of this RectangleF.

        :return: The height of this RectangleF.
        :rtype: float
        """
        return self.container['height']

    @height.setter
    def height(self, height):
        """
        Sets the height of this RectangleF.

        :param height: The height of this RectangleF.
        :type: float
        """
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")
        """

        self.container['height'] = height

    @property
    def left(self):
        """
        Gets the left of this RectangleF.

        :return: The left of this RectangleF.
        :rtype: float
        """
        return self.container['left']

    @left.setter
    def left(self, left):
        """
        Sets the left of this RectangleF.

        :param left: The left of this RectangleF.
        :type: float
        """
        """
        if left is None:
            raise ValueError("Invalid value for `left`, must not be `None`")
        """

        self.container['left'] = left

    @property
    def top(self):
        """
        Gets the top of this RectangleF.

        :return: The top of this RectangleF.
        :rtype: float
        """
        return self.container['top']

    @top.setter
    def top(self, top):
        """
        Sets the top of this RectangleF.

        :param top: The top of this RectangleF.
        :type: float
        """
        """
        if top is None:
            raise ValueError("Invalid value for `top`, must not be `None`")
        """

        self.container['top'] = top

    @property
    def right(self):
        """
        Gets the right of this RectangleF.

        :return: The right of this RectangleF.
        :rtype: float
        """
        return self.container['right']

    @right.setter
    def right(self, right):
        """
        Sets the right of this RectangleF.

        :param right: The right of this RectangleF.
        :type: float
        """
        """
        if right is None:
            raise ValueError("Invalid value for `right`, must not be `None`")
        """

        self.container['right'] = right

    @property
    def bottom(self):
        """
        Gets the bottom of this RectangleF.

        :return: The bottom of this RectangleF.
        :rtype: float
        """
        return self.container['bottom']

    @bottom.setter
    def bottom(self, bottom):
        """
        Sets the bottom of this RectangleF.

        :param bottom: The bottom of this RectangleF.
        :type: float
        """
        """
        if bottom is None:
            raise ValueError("Invalid value for `bottom`, must not be `None`")
        """

        self.container['bottom'] = bottom

    @property
    def is_empty(self):
        """
        Gets the is_empty of this RectangleF.

        :return: The is_empty of this RectangleF.
        :rtype: bool
        """
        return self.container['is_empty']

    @is_empty.setter
    def is_empty(self, is_empty):
        """
        Sets the is_empty of this RectangleF.

        :param is_empty: The is_empty of this RectangleF.
        :type: bool
        """
        """
        if is_empty is None:
            raise ValueError("Invalid value for `is_empty`, must not be `None`")
        """

        self.container['is_empty'] = is_empty

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RectangleF):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
