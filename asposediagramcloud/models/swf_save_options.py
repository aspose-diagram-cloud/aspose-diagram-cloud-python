# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re
from . import SaveOptionsModel

class SWFSaveOptions(SaveOptionsModel):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page_count': 'int',
        'viewer_included': 'bool',
        'page_index': 'int',
        'save_foreground_pages_only': 'bool'
    }

    attribute_map = {
        'page_count': 'PageCount',
        'viewer_included': 'ViewerIncluded',
        'page_index': 'PageIndex',
        'save_foreground_pages_only': 'SaveForegroundPagesOnly'
    }
    
    @staticmethod
    def get_swagger_types():
        return dict(SWFSaveOptions.swagger_types, **SaveOptionsModel.get_swagger_types())
    
    @staticmethod
    def get_attribute_map():
        return dict(SWFSaveOptions.attribute_map, **SaveOptionsModel.get_attribute_map())
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, page_count=None, viewer_included=None, page_index=None, save_foreground_pages_only=None, **kw):
        super(SWFSaveOptions, self).__init__(**kw)
		    
        """
        SWFSaveOptions - a model defined in Swagger
        """

        self.container['page_count'] = None
        self.container['viewer_included'] = None
        self.container['page_index'] = None
        self.container['save_foreground_pages_only'] = None

        if page_count is not None:
          self.page_count = page_count
        if viewer_included is not None:
          self.viewer_included = viewer_included
        if page_index is not None:
          self.page_index = page_index
        if save_foreground_pages_only is not None:
          self.save_foreground_pages_only = save_foreground_pages_only

    @property
    def page_count(self):
        """
        Gets the page_count of this SWFSaveOptions.

        :return: The page_count of this SWFSaveOptions.
        :rtype: int
        """
        return self.container['page_count']

    @page_count.setter
    def page_count(self, page_count):
        """
        Sets the page_count of this SWFSaveOptions.

        :param page_count: The page_count of this SWFSaveOptions.
        :type: int
        """

        self.container['page_count'] = page_count

    @property
    def viewer_included(self):
        """
        Gets the viewer_included of this SWFSaveOptions.

        :return: The viewer_included of this SWFSaveOptions.
        :rtype: bool
        """
        return self.container['viewer_included']

    @viewer_included.setter
    def viewer_included(self, viewer_included):
        """
        Sets the viewer_included of this SWFSaveOptions.

        :param viewer_included: The viewer_included of this SWFSaveOptions.
        :type: bool
        """

        self.container['viewer_included'] = viewer_included

    @property
    def page_index(self):
        """
        Gets the page_index of this SWFSaveOptions.

        :return: The page_index of this SWFSaveOptions.
        :rtype: int
        """
        return self.container['page_index']

    @page_index.setter
    def page_index(self, page_index):
        """
        Sets the page_index of this SWFSaveOptions.

        :param page_index: The page_index of this SWFSaveOptions.
        :type: int
        """

        self.container['page_index'] = page_index

    @property
    def save_foreground_pages_only(self):
        """
        Gets the save_foreground_pages_only of this SWFSaveOptions.

        :return: The save_foreground_pages_only of this SWFSaveOptions.
        :rtype: bool
        """
        return self.container['save_foreground_pages_only']

    @save_foreground_pages_only.setter
    def save_foreground_pages_only(self, save_foreground_pages_only):
        """
        Sets the save_foreground_pages_only of this SWFSaveOptions.

        :param save_foreground_pages_only: The save_foreground_pages_only of this SWFSaveOptions.
        :type: bool
        """

        self.container['save_foreground_pages_only'] = save_foreground_pages_only

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SWFSaveOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
