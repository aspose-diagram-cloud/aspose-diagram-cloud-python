# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TextStyleData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'style': 'str',
        'font_name': 'str',
        'font_size': 'float'
    }

    attribute_map = {
        'color': 'Color',
        'style': 'Style',
        'font_name': 'FontName',
        'font_size': 'FontSize'
    }
    
    @staticmethod
    def get_swagger_types():
        return TextStyleData.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return TextStyleData.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, color=None, style=None, font_name=None, font_size=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        TextStyleData - a model defined in Swagger
        """

        self.container['color'] = None
        self.container['style'] = None
        self.container['font_name'] = None
        self.container['font_size'] = None

        if color is not None:
          self.color = color
        self.style = style
        if font_name is not None:
          self.font_name = font_name
        if font_size is not None:
          self.font_size = font_size

    @property
    def color(self):
        """
        Gets the color of this TextStyleData.

        :return: The color of this TextStyleData.
        :rtype: str
        """
        return self.container['color']

    @color.setter
    def color(self, color):
        """
        Sets the color of this TextStyleData.

        :param color: The color of this TextStyleData.
        :type: str
        """

        self.container['color'] = color

    @property
    def style(self):
        """
        Gets the style of this TextStyleData.

        :return: The style of this TextStyleData.
        :rtype: str
        """
        return self.container['style']

    @style.setter
    def style(self, style):
        """
        Sets the style of this TextStyleData.

        :param style: The style of this TextStyleData.
        :type: str
        """
        """
        if style is None:
            raise ValueError("Invalid value for `style`, must not be `None`")
        """
        allowed_values = ["Bold", "Italic", "Underline", "SmallCaps", "Undefined"]
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self.container['style'] = style

    @property
    def font_name(self):
        """
        Gets the font_name of this TextStyleData.

        :return: The font_name of this TextStyleData.
        :rtype: str
        """
        return self.container['font_name']

    @font_name.setter
    def font_name(self, font_name):
        """
        Sets the font_name of this TextStyleData.

        :param font_name: The font_name of this TextStyleData.
        :type: str
        """

        self.container['font_name'] = font_name

    @property
    def font_size(self):
        """
        Gets the font_size of this TextStyleData.

        :return: The font_size of this TextStyleData.
        :rtype: float
        """
        return self.container['font_size']

    @font_size.setter
    def font_size(self, font_size):
        """
        Sets the font_size of this TextStyleData.

        :param font_size: The font_size of this TextStyleData.
        :type: float
        """

        self.container['font_size'] = font_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TextStyleData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
