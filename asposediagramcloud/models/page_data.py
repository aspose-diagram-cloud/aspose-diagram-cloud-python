# coding: utf-8

"""
    Aspose.Diagram Cloud API Reference

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PageData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'page_setting': 'PageSetting',
        'shapes': 'list[ShapeData]'
    }

    attribute_map = {
        'id': 'ID',
        'page_setting': 'PageSetting',
        'shapes': 'Shapes'
    }
    
    @staticmethod
    def get_swagger_types():
        return PageData.swagger_types
    
    @staticmethod
    def get_attribute_map():
        return PageData.attribute_map
    
    def get_from_container(self, attr):
        if attr in self.container:
            return self.container[attr]
        return None

    def __init__(self, id=None, page_setting=None, shapes=None, **kw):
        """
        Associative dict for storing property values
        """
        self.container = {}
		    
        """
        PageData - a model defined in Swagger
        """

        self.container['id'] = None
        self.container['page_setting'] = None
        self.container['shapes'] = None

        self.id = id
        if page_setting is not None:
          self.page_setting = page_setting
        if shapes is not None:
          self.shapes = shapes

    @property
    def id(self):
        """
        Gets the id of this PageData.
        Page Id

        :return: The id of this PageData.
        :rtype: int
        """
        return self.container['id']

    @id.setter
    def id(self, id):
        """
        Sets the id of this PageData.
        Page Id

        :param id: The id of this PageData.
        :type: int
        """
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")
        """

        self.container['id'] = id

    @property
    def page_setting(self):
        """
        Gets the page_setting of this PageData.
        page setting info

        :return: The page_setting of this PageData.
        :rtype: PageSetting
        """
        return self.container['page_setting']

    @page_setting.setter
    def page_setting(self, page_setting):
        """
        Sets the page_setting of this PageData.
        page setting info

        :param page_setting: The page_setting of this PageData.
        :type: PageSetting
        """

        self.container['page_setting'] = page_setting

    @property
    def shapes(self):
        """
        Gets the shapes of this PageData.
        shape list

        :return: The shapes of this PageData.
        :rtype: list[ShapeData]
        """
        return self.container['shapes']

    @shapes.setter
    def shapes(self, shapes):
        """
        Sets the shapes of this PageData.
        shape list

        :param shapes: The shapes of this PageData.
        :type: list[ShapeData]
        """

        self.container['shapes'] = shapes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.get_swagger_types()):
            value = self.get_from_container(attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PageData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
